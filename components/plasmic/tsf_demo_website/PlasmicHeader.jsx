/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tapQSmgujw7smcBwiTayug
// Component: 0XA8z88jHqGh
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: BmK5KSjeUCoq/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: tapQSmgujw7smcBwiTayug/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: tapQSmgujw7smcBwiTayug/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 0XA8z88jHqGh/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: CTrKh01FN7bB/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: DI5o05B9KHOk/icon

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array();

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__kLp9N)}>
        <div className={classNames(projectcss.all, sty.freeBox__hiVO)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__lEpkL
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg__hXit)}
              role={"img"}
            />
          </PlasmicLink__>
          <div className={classNames(projectcss.all, sty.freeBox__kj0Ru)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__uhuvI
              )}
              component={Link}
              href={`/about-us`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__twlLs)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gecEd
                )}
              >
                {"About Us"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__pPdwj)}
                  role={"img"}
                />
              ) : null}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__oGxw8
              )}
              component={Link}
              href={`/features`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__prU8E)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cxdSn
                )}
              >
                {"Features"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__hky1U)}
                  role={"img"}
                />
              ) : null}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___21GEn
              )}
              component={Link}
              href={`/pricing`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__fEpK8)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bAva
                )}
              >
                {"Pricing "}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rmlOa)}
                  role={"img"}
                />
              ) : null}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__to415
              )}
              component={Link}
              href={`/contact`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__zVm5G)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1IU1Z
                )}
              >
                {"Contact"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__bgAwg)}
                  role={"img"}
                />
              ) : null}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__yBtax
              )}
              component={Link}
              href={`/blog`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__jzItn)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j1O
                )}
              >
                {"Blog"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rHvh9)}
                  role={"img"}
                />
              ) : null}
            </PlasmicLink__>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"neutral"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d1Wj
                  )}
                >
                  {"Get started"}
                </div>
              }
              size={"extraLarge"}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
